#
# Deployment Stack
# Creates the API Gateway, Lambda, all roles, etc and maps them together.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "CloudFormation-GitDeploy: Automated CloudFormation Management from Git Source"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Main Configuration
        Parameters:
          - AccountIds
          - AllowIAMCapabilities
          - CFAccessRoleName
          - CFServiceRoleName
          - SSMPath
          - SemanticStackNaming
      - Label:
          default: Git Source
        Parameters:
          - GithubRepoName
          - GithubRepoOwner
          - GitHubToken
      - Label:
          default: Slack & Email Configuration
        Parameters:
          - SlackChannel
          - SlackWebHookUrl
          - EmailContact
      - Label:
          default: Optional Configuration
        Parameters:
          - StackChangeSetPrefix
          - ExternalNotificationSNSArn
          - TrackingTagPrefix
    ParameterLabels:
      AccountIds:
        default: AWS Account ID's
      AllowIAMCapabilities:
        default: CloudFormation IAM Capabilities Enabled?
      SSMPath:
        default: SSM Path Prefix
      SlackChannel:
        default: Slack Channel Name
      SlackWebHookUrl:
        default: Slack Web Hook URL
      EmailContact:
        default: Email Content (slack fallback)
      StackChangeSetPrefix:
        default: Stack Change Set Prefix
      SemanticStackNaming:
        default: Force Semantic Stack Naming? (Recommended)
      ExternalNotificationSNSArn:
        default: External SNS Notification ARN
      TrackingTagPrefix:
        default: Tracking Tag Prefix
      GithubRepoName:
        default: GitHub Repository Name
      GithubRepoOwner:
        default: GitHub Repository Owner
      GitHubToken:
        default: GitHub Personal Access Token


Parameters:
  AllowIAMCapabilities:
    Description: "CloudFormation has an IAM safe guard built in. If this is false, no IAM resources can be created even if the policy arns allow it"
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  CFAccessRoleName:
    Description: "The name of the role in each account that the deployer assumes for access to CloudFormation"
    Type: String
  CFServiceRoleName:
    Description: "(Optional): The name of the CloudFormation service role in each account that is used by CF for managing the resources. Leave EMPTY if wish to use the CFAccessRoleName's role to also manage the resources (no service role). This role must be passable by the CFAccessRoleName and assumable by CloudFormation"
    Type: String
    Default: ""
  StackChangeSetPrefix:
    Description: "(Optional): The naming prefix applied to the the name of stack change sets. This is useful to lock down teams' automation deployers and roles to only be able to execute change sets that belong to them. If not set, the change set name will be: cf-deployer-automation. If it is set the value will be prepended to the following: ${yourvalue}-cf-deployer-automation"
    Type: String
    Default: ""
  SemanticStackNaming:
    Description: "Forces semantic stack naming, even when stacks provide their own StackName. This is highly recommended, otherwise two stacks that accidentally specify the same name will overwrite each other"
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  AccountIds:
    Description: "The comma delimited list of account ID's that can this deployer can automatically deployed to."
    Type: CommaDelimitedList
  ExternalNotificationSNSArn:
    Description: "(Optional): The SNS arn to publish events to that contain a record of the change that is occurring by the automation. Leave empty if not used."
    Type: String
    Default: ""
  SlackWebHookUrl:
    Description: "Slack webhook URL; see https://example.slack.com/apps/"
    Type: String
  SlackChannel:
    Description: "Slack Channel name to post to"
    Type: String
  EmailContact:
    Description: "Email to send unhandled errors (when Slack's API is down)"
    Type: String
  SSMPath:
    Type: String
    Description: 'Base path to SSM secrets needed by deployer (e.g. "/cf-automation/${StackName}/*")'
  TrackingTagPrefix:
    Type: String
    Description: "(Optional): Every stack launched has a tag automatically added to the stack so you what stack file the stack was created from. Use this prefix to prepend to that path other useful information such as what repo the stack came from or what deployer it came from.  If you use multiple deployers and git repos, this is recommended to use this to identify which one."
    Default: ""

  # TODO: Add support for CodeCommit
  GithubRepoName:
    Description: The name of the repo (As seen on GitHub.com)
    Type: String
  GithubRepoOwner:
    Description: The owner of the repo (As seen on Github.com)
    Type: String
  GitHubToken:
    Type: String
    NoEcho: True
    Description: GitHub repository OAuth token - this is a GitHub Personal Access Token. All Git actions will appear as from the owner of this token.

Conditions:
  HasExternalNotificationSNS: !Not [!Equals [!Ref ExternalNotificationSNSArn, ""]]
  HasCFServiceRole: !Not [!Equals [!Ref CFServiceRoleName, ""]]
  HasStackChageSetPrefix: !Not [!Equals [!Ref StackChangeSetPrefix, ""]]
  HasTrackingTagPrefix: !Not [!Equals [!Ref TrackingTagPrefix, ""]]

Resources:
  S3CreateUpdateEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: S3 CreateUpdate Events"

  S3DeleteEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: S3 Delete Events"

  S3EventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref S3CreateUpdateEventsTopic
        - !Ref S3DeleteEventsTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "CreateEvents"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref S3CreateUpdateEventsTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
          - Sid: "DeleteEvents"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref S3DeleteEventsTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"

  CloudFormationSyncBucket:
    Type: AWS::S3::Bucket
    DependsOn: S3EventsSNSPolicy
    Properties:
      BucketName: !Sub "${AWS::StackName}-cfstack-bucket"
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:Put"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectCreated:Post"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectCreated:CompleteMultipartUpload"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectRemoved:DeleteMarkerCreated"
            Topic: !Ref S3DeleteEventsTopic
            Filter:
              S3Key:
               Rules:
                 - Name: "prefix"
                   Value: "stacks/"

  CloudFormationSyncBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudFormationSyncBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: "Allow"
            Principal:
              AWS: !Ref AccountIds
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
              - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket/*"

  BuildStatusTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Pipeline Status"
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - CodeBuildStatusFunction
          - Arn
        Protocol: lambda

  ErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Errors"
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - SNSDLQErrorFunction
          - Arn
        Protocol: lambda

  SlackNotificationErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Errors"
      Subscription:
        - Endpoint: !Ref EmailContact
          Protocol: "email-json"

  CloudFormationEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - CFNotifyFunction
          - Arn
        Protocol: lambda

  CloudFormationEventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref CloudFormationEventsTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "PublishEvents"
            Effect: Allow
            Principal:
              AWS: !Ref AccountIds
            Action: sns:Publish
            Resource: !Ref CloudFormationEventsTopic

  CodeBuildEventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref BuildStatusTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "PublishEvents"
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action: sns:Publish
            Resource: !Ref BuildStatusTopic

  LambdaStackMgmtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "s3-ro-access"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
                  - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket/*"
        - PolicyName: "ssm-access"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:*:*:parameter${SSMPath}*"
        - PolicyName: "cross-account-cloudformation"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub "arn:aws:iam::*:role/${CFAccessRoleName}"
        - PolicyName: "snsDLQ"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref ErrorsTopic
        - PolicyName: "xray-put-traces"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
        - !If
            - HasExternalNotificationSNS
            - PolicyName: "external-sns-publish"
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - sns:Publish
                    Resource:
                      - !Ref ExternalNotificationSNSArn
            - !Ref "AWS::NoValue"

  CreateUpdateStackEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      CodeUri: ./s3-event-handlers/target/universal/s3-event-handlers-1.0.zip
      MemorySize: 1536
      Timeout: 300
      Tracing:  Active
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref ErrorsTopic
      Environment:
        Variables:
          CF_EVENTS_TOPIC_ARN: !Ref CloudFormationEventsTopic
          IAM_CAPABILITIES_ENABLED: !Ref AllowIAMCapabilities
          SEMANTIC_STACK_NAMING: !Ref SemanticStackNaming
          IAM_ASSUME_ROLE_NAME: !Ref CFAccessRoleName
          IAM_CF_SERVICE_ROLE_NAME: !If [HasCFServiceRole, !Ref CFServiceRoleName, !Ref "AWS::NoValue"]
          SNS_EXTERNAL_TOPIC_NOTIFY_ARN: !If [HasExternalNotificationSNS, !Ref ExternalNotificationSNSArn, !Ref "AWS::NoValue"]
          CF_CHANGE_SET_NAME_PREFIX: !If [HasStackChageSetPrefix, !Ref StackChangeSetPrefix, !Ref "AWS::NoValue"]
          TRACKING_TAG_PREFIX: !If [HasTrackingTagPrefix, !Ref TrackingTagPrefix, !Ref "AWS::NoValue"]
      Role: !GetAtt LambdaStackMgmtRole.Arn
      Handler: com.lifeway.cloudops.cloudformation.LambdaStackHandler::createUpdateHandler
      Events:
        CreateUpdateS3Event:
          Type: SNS
          Properties:
            Topic: !Ref S3CreateUpdateEventsTopic

  DeleteStackEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      CodeUri: ./s3-event-handlers/target/universal/s3-event-handlers-1.0.zip
      MemorySize: 1536
      Timeout: 300
      Tracing:  Active
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref ErrorsTopic
      Environment:
        Variables:
          CF_EVENTS_TOPIC_ARN: !Ref CloudFormationEventsTopic
          IAM_CAPABILITIES_ENABLED: !Ref AllowIAMCapabilities
          SEMANTIC_STACK_NAMING: !Ref SemanticStackNaming
          IAM_ASSUME_ROLE_NAME: !Ref CFAccessRoleName
          IAM_CF_SERVICE_ROLE_NAME: !If [HasCFServiceRole, !Ref CFServiceRoleName, !Ref "AWS::NoValue"]
          SNS_EXTERNAL_TOPIC_NOTIFY_ARN: !If [HasExternalNotificationSNS, !Ref ExternalNotificationSNSArn, !Ref "AWS::NoValue"]
          CF_CHANGE_SET_NAME_PREFIX: !If [HasStackChageSetPrefix, !Ref StackChangeSetPrefix, !Ref "AWS::NoValue"]
          TRACKING_TAG_PREFIX: !If [HasTrackingTagPrefix, !Ref TrackingTagPrefix, !Ref "AWS::NoValue"]
      Role: !GetAtt LambdaStackMgmtRole.Arn
      Handler: com.lifeway.cloudops.cloudformation.LambdaStackHandler::deleteHandler
      Events:
        DeleteS3Event:
          Type: SNS
          Properties:
            Topic: !Ref S3DeleteEventsTopic
            
  CFNotifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CFNotifyPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref SlackNotificationErrorsTopic
          - Effect: Allow
            Action:
              - cloudformation:DescribeStackResources
            Resource: '*'

  CFNotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to post CF updates to Slack
      Handler: lambda_notify.lambda_handler
      Role: !GetAtt CFNotifyRole.Arn
      CodeUri: ./cf-notify/cf-notify.zip
      Runtime: python2.7
      Timeout: 300
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref SlackNotificationErrorsTopic
      Environment:
        Variables:
          WEBHOOK: !Ref SlackWebHookUrl
          CHANNEL: !Ref SlackChannel

  CFNotifyInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CFNotifyFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: CloudFormationEventsTopic

  SNSDLQErrorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to post SNS DLQ errors to Slack
      Handler: sns_error.lambda_handler
      Role: !GetAtt CFNotifyRole.Arn
      CodeUri: ./sns-notify/sns-error.zip
      Runtime: python2.7
      Timeout: 300
      AutoPublishAlias: "live"
      Environment:
        Variables:
          WEBHOOK: !Ref SlackWebHookUrl
          CHANNEL: !Ref SlackChannel
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref SlackNotificationErrorsTopic

  SNSDLQErrorInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: SNSDLQErrorFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: ErrorsTopic

  CodeBuildStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to post CodeBuild updates to Slack
      Handler: index.handler
      Role: !GetAtt CFNotifyRole.Arn
      CodeUri: ./codebuild-notify/
      Runtime: nodejs6.10
      Timeout: 300
      AutoPublishAlias: "live"
      Environment:
        Variables:
          WEBHOOK: !Ref SlackWebHookUrl
          CHANNEL: !Ref SlackChannel
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref SlackNotificationErrorsTopic
        
  CodeBuildErrorInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: CodeBuildStatusFunction
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn:
          Ref: BuildStatusTopic



  #
  # CODE PIPELINE & PR BUILDER
  #
  CodePipelineBuildArtifactsBucket:
    Type: AWS::S3::Bucket

  PipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Effect: Allow
                Resource:
                  - !GetAtt CodeBuildProject.Arn
              - Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${CodePipelineBuildArtifactsBucket}/*'
              - Action:
                  - 'iam:PassRole'
                Effect: Allow
                Resource:
                  - !GetAtt CodeBuildServiceRole.Arn

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
              - Effect: Allow
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref CloudFormationSyncBucket
                      - "/*"
                  - !GetAtt CloudFormationSyncBucket.Arn
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${CodePipelineBuildArtifactsBucket}/*'
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
              - Effect: Allow
                Action:
                  - 'cloudformation:ValidateTemplate'
                Resource: "*"

  #
  # CODE BUILD
  #
  CodeBuildPRBuilder:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build-pr'
      Description: !Sub '${AWS::StackName}-pr-build'
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          !Sub
            - "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${RepoName}"
            - RepoName:
                Fn::ImportValue: "CloudFormation-GitDeploy:ECRBuildImageName"
        EnvironmentVariables:
          - Name: S3_BUCKET_NAME
            Value: !Ref CloudFormationSyncBucket
            Type: PLAINTEXT
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: GITHUB
        Auth:
          Type: OAUTH
        BuildSpec: buildspec-pr.yml
        GitCloneDepth: 5
        Location: !Sub "https://github.com/${GithubRepoOwner}/${GithubRepoName}.git"
      Triggers:
        Webhook: true

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      Description: !Sub '${AWS::StackName}-pipeline-build'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          !Sub
            - "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${RepoName}"
            - RepoName:
                Fn::ImportValue: "CloudFormation-GitDeploy:ECRBuildImageName"
        EnvironmentVariables:
          - Name: S3_BUCKET_NAME
            Value: !Ref CloudFormationSyncBucket
            Type: PLAINTEXT
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-sync.yml

  EventRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - FAILED
            - IN_PROGRESS
            - STOPPED
            - SUCCEEDED
          project-name:
            - !Ref CodeBuildProject
      State: ENABLED
      Targets:
        - Arn: !Ref BuildStatusTopic
          Id: "sns-notify"

  #
  # CODE PIPELINE
  #

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineBuildArtifactsBucket
        Type: S3
      Name: !Sub "${AWS::StackName}-pipeline"
      RoleArn: !GetAtt PipelineExecutionRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GithubRepoOwner
                Repo: !Ref GithubRepoName
                Branch: master
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceZip
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceZip
