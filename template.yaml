#
# Deployment Stack
# Creates the API Gateway, Lambda, all roles, etc and maps them together.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  AllowIAMCapabilities:
    Description: "CloudFormation has an IAM safe guard built in. If this is false, no IAM resources can be created even if the policy arns allow it"
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  AssumeRoleName:
    Description: "The name of the role in each account that the deployer assumes for access to CloudFormation"
    Type: String
    Default: "CF-Automated-Deploy"
  SemanticStackNaming:
    Description: "Forces semantic stack naming, even when stacks provide their own StackName. This is highly recommended, otherwise two stacks that accidentally specify the same name will overwrite each other"
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  AccountIDArns:
    Description: "The list of account ID's in full ARN form (`arn:aws:iam::<ID>:root`) that can be automatically deployed to."
    Type: CommaDelimitedList
  ExternalNotificationSNSArn:
    Description: "The SNS arn to publish events to that contain the notice of change that is occurring by the automation. Leave empty if not used."
    Type: String
    Default: ""

Conditions:
  HasExternalNotificationSNS: !Not [!Equals [!Ref ExternalNotificationSNSArn, ""]]


Resources:
  S3CreateUpdateEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: S3 CreateUpdate Events"

  S3DeleteEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: S3 Delete Events"

  S3EventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref S3CreateUpdateEventsTopic
        - !Ref S3DeleteEventsTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "CreateEvents"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref S3CreateUpdateEventsTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
          - Sid: "DeleteEvents"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref S3DeleteEventsTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"

  CloudFormationSyncBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-cfstack-bucket"
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:Put"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectCreated:Post"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectCreated:CompleteMultipartUpload"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectRemoved:DeleteMarkerCreated"
            Topic: !Ref S3DeleteEventsTopic
            Filter:
              S3Key:
               Rules:
                 - Name: "prefix"
                   Value: "stacks/"

  CloudFormationSyncBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudFormationSyncBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: "Allow"
            Principal:
              AWS: !Ref AccountIDArns
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
              - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket/*"

  BuildStatusTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Pipeline Status"
      Subscription:
        - Endpoint: "ryan.means@lifeway.com"
          Protocol: "email-json"

  ErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Errors"
      Subscription:
        - Endpoint: "ryan.means@lifeway.com"
          Protocol: "email-json"

  CloudFormationEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: CF Events"
      Subscription:
        - Endpoint: "ryan.means@lifeway.com"
          Protocol: "email-json"

  CloudFormationEventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref CloudFormationEventsTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "PublishEvents"
            Effect: Allow
            Principal:
              AWS: !Ref AccountIDArns
            Action: sns:Publish
            Resource: !Ref CloudFormationEventsTopic

  LambdaStackMgmtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "s3-ro-access"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
                  - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket/*"
        - PolicyName: "cross-account-cloudformation"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub "arn:aws:iam::*:role/${AssumeRoleName}"
        - PolicyName: "snsDLQ"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref ErrorsTopic
        - PolicyName: "xray-put-traces"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
        - !If
            - HasExternalNotificationSNS
            - PolicyName: "external-sns-publish"
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - sns:Publish
                    Resource:
                      - !Ref ExternalNotificationSNSArn
            - !Ref "AWS::NoValue"

  CreateUpdateStackEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      CodeUri: ./s3-event-handlers/target/universal/s3-event-handlers-1.0.zip
      MemorySize: 1536
      Timeout: 300
      Tracing:  Active
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref ErrorsTopic
      Environment:
        Variables:
          CF_EVENTS_TOPIC_ARN: !Ref CloudFormationEventsTopic
          IAM_CAPABILITIES_ENABLED: !Ref AllowIAMCapabilities
          SEMANTIC_STACK_NAMING: !Ref SemanticStackNaming
          IAM_ASSUME_ROLE_NAME: !Ref AssumeRoleName
          SNS_EXTERNAL_TOPIC_NOTIFY_ARN: !If [HasExternalNotificationSNS, !Ref ExternalNotificationSNSArn, !Ref "AWS::NoValue"]
      Role: !GetAtt LambdaStackMgmtRole.Arn
      Handler: com.lifeway.cloudops.cloudformation.LambdaStackHandler::createUpdateHandler
      Events:
        CreateUpdateS3Event:
          Type: SNS
          Properties:
            Topic: !Ref S3CreateUpdateEventsTopic

  DeleteStackEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      CodeUri: ./s3-event-handlers/target/universal/s3-event-handlers-1.0.zip
      MemorySize: 1536
      Timeout: 300
      Tracing:  Active
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref ErrorsTopic
      Environment:
        Variables:
          CF_EVENTS_TOPIC_ARN: !Ref CloudFormationEventsTopic
          IAM_CAPABILITIES_ENABLED: !Ref AllowIAMCapabilities
          SEMANTIC_STACK_NAMING: !Ref SemanticStackNaming
          IAM_ASSUME_ROLE_NAME: !Ref AssumeRoleName
          SNS_EXTERNAL_TOPIC_NOTIFY_ARN: !If [HasExternalNotificationSNS, !Ref ExternalNotificationSNSArn, !Ref "AWS::NoValue"]
      Role: !GetAtt LambdaStackMgmtRole.Arn
      Handler: com.lifeway.cloudops.cloudformation.LambdaStackHandler::deleteHandler
      Events:
        DeleteS3Event:
          Type: SNS
          Properties:
            Topic: !Ref S3DeleteEventsTopic

Outputs:
  S3Bucket:
    Value: !Ref CloudFormationSyncBucket
    Export:
      Name: !Sub "CloudFormationDeployer:${AWS::StackName}:S3Bucket"
  S3BucketArn:
    Value: !GetAtt CloudFormationSyncBucket.Arn
    Export:
      Name: !Sub "CloudFormationDeployer:${AWS::StackName}:S3BucketArn"
  BuildStatusSNSArn:
    Value: !Ref BuildStatusTopic
    Export:
      Name: !Sub "CloudFormationDeployer:${AWS::StackName}:BuildStatusSNSArn"
