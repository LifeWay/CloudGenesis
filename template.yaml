#
# Deployment Stack
# Creates the API Gateway, Lambda, all roles, etc and maps them together.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  AllowIAMCapabilities:
    Description: "CloudFormation has an IAM safe guard built in. If this is false, no IAM resources can be created even if the policy arns allow it"
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  CFAccessRoleName:
    Description: "The name of the role in each account that the deployer assumes for access to CloudFormation"
    Type: String
  CFServiceRoleName:
    Description: "The name of the CloudFormation service role in each account that is used by CF for managing the resources. Leave EMPTY if wish to use the CFAccessRoleName's role to also manage the resources (no service role). This role must be passable by the CFAccessRoleName and assumable by CloudFormation"
    Type: String
    Default: ""
  SemanticStackNaming:
    Description: "Forces semantic stack naming, even when stacks provide their own StackName. This is highly recommended, otherwise two stacks that accidentally specify the same name will overwrite each other"
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  AccountIds:
    Description: "The list of account ID's that can be automatically deployed to. Needed for those accounts to access the S3 bucket for templates and emit SNS events from CloudFormation"
    Type: CommaDelimitedList
  ExternalNotificationSNSArn:
    Description: "The SNS arn to publish events to that contain a record of the change that is occurring by the automation. Leave empty if not used."
    Type: String
    Default: ""
  SlackWebHookUrl:
    Description: Slack webhook URL; see https://example.slack.com/apps/
    Type: String
  SlackChannel:
    Description: Slack Channel name to post to
    Type: String
  EmailContact:
    Description: Email to send unhandled errors (when Slack's API is down)
    Type: String
  SSMPath:
    Type: String
    Description: Base path to SSM secrets needed by deployer (ie. "/cf-automation/${StackName}/*")

Conditions:
  HasExternalNotificationSNS: !Not [!Equals [!Ref ExternalNotificationSNSArn, ""]]
  HasCFServiceRole: !Not [!Equals [!Ref CFServiceRoleName, ""]]

Resources:
  S3CreateUpdateEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: S3 CreateUpdate Events"

  S3DeleteEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: S3 Delete Events"

  S3EventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref S3CreateUpdateEventsTopic
        - !Ref S3DeleteEventsTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "CreateEvents"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref S3CreateUpdateEventsTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
          - Sid: "DeleteEvents"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref S3DeleteEventsTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"

  CloudFormationSyncBucket:
    Type: AWS::S3::Bucket
    DependsOn: S3EventsSNSPolicy
    Properties:
      BucketName: !Sub "${AWS::StackName}-cfstack-bucket"
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:Put"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectCreated:Post"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectCreated:CompleteMultipartUpload"
            Topic: !Ref S3CreateUpdateEventsTopic
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "stacks/"
          - Event: "s3:ObjectRemoved:DeleteMarkerCreated"
            Topic: !Ref S3DeleteEventsTopic
            Filter:
              S3Key:
               Rules:
                 - Name: "prefix"
                   Value: "stacks/"

  CloudFormationSyncBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudFormationSyncBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: "Allow"
            Principal:
              AWS: !Ref AccountIds
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
              - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket/*"

  BuildStatusTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Pipeline Status"
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - CodeBuildStatusFunction
          - Arn
        Protocol: lambda

  ErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Errors"
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - SNSDLQErrorFunction
          - Arn
        Protocol: lambda

  SlackNotificationErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CF Automation: Errors"
      Subscription:
        - Endpoint: !Ref EmailContact
          Protocol: "email-json"

  CloudFormationEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - CFNotifyFunction
          - Arn
        Protocol: lambda

  CloudFormationEventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref CloudFormationEventsTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "PublishEvents"
            Effect: Allow
            Principal:
              AWS: !Ref AccountIds
            Action: sns:Publish
            Resource: !Ref CloudFormationEventsTopic

  CodeBuildEventsSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref BuildStatusTopic
      PolicyDocument:
        Id: S3TopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: "PublishEvents"
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action: sns:Publish
            Resource: !Ref BuildStatusTopic

  LambdaStackMgmtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "s3-ro-access"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket"
                  - !Sub "arn:aws:s3:::${AWS::StackName}-cfstack-bucket/*"
        - PolicyName: "ssm-access"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:*:*:parameter${SSMPath}*"
        - PolicyName: "cross-account-cloudformation"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub "arn:aws:iam::*:role/${CFAccessRoleName}"
        - PolicyName: "snsDLQ"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref ErrorsTopic
        - PolicyName: "xray-put-traces"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
        - !If
            - HasExternalNotificationSNS
            - PolicyName: "external-sns-publish"
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - sns:Publish
                    Resource:
                      - !Ref ExternalNotificationSNSArn
            - !Ref "AWS::NoValue"

  CreateUpdateStackEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      CodeUri: ./s3-event-handlers/target/universal/s3-event-handlers-1.0.zip
      MemorySize: 1536
      Timeout: 300
      Tracing:  Active
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref ErrorsTopic
      Environment:
        Variables:
          CF_EVENTS_TOPIC_ARN: !Ref CloudFormationEventsTopic
          IAM_CAPABILITIES_ENABLED: !Ref AllowIAMCapabilities
          SEMANTIC_STACK_NAMING: !Ref SemanticStackNaming
          IAM_ASSUME_ROLE_NAME: !Ref CFAccessRoleName
          IAM_CF_SERVICE_ROLE_NAME: !If [HasCFServiceRole, !Ref CFServiceRoleName, !Ref "AWS::NoValue"]
          SNS_EXTERNAL_TOPIC_NOTIFY_ARN: !If [HasExternalNotificationSNS, !Ref ExternalNotificationSNSArn, !Ref "AWS::NoValue"]
      Role: !GetAtt LambdaStackMgmtRole.Arn
      Handler: com.lifeway.cloudops.cloudformation.LambdaStackHandler::createUpdateHandler
      Events:
        CreateUpdateS3Event:
          Type: SNS
          Properties:
            Topic: !Ref S3CreateUpdateEventsTopic

  DeleteStackEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java8
      CodeUri: ./s3-event-handlers/target/universal/s3-event-handlers-1.0.zip
      MemorySize: 1536
      Timeout: 300
      Tracing:  Active
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref ErrorsTopic
      Environment:
        Variables:
          CF_EVENTS_TOPIC_ARN: !Ref CloudFormationEventsTopic
          IAM_CAPABILITIES_ENABLED: !Ref AllowIAMCapabilities
          SEMANTIC_STACK_NAMING: !Ref SemanticStackNaming
          IAM_ASSUME_ROLE_NAME: !Ref CFAccessRoleName
          IAM_CF_SERVICE_ROLE_NAME: !If [HasCFServiceRole, !Ref CFServiceRoleName, !Ref "AWS::NoValue"]
          SNS_EXTERNAL_TOPIC_NOTIFY_ARN: !If [HasExternalNotificationSNS, !Ref ExternalNotificationSNSArn, !Ref "AWS::NoValue"]
      Role: !GetAtt LambdaStackMgmtRole.Arn
      Handler: com.lifeway.cloudops.cloudformation.LambdaStackHandler::deleteHandler
      Events:
        DeleteS3Event:
          Type: SNS
          Properties:
            Topic: !Ref S3DeleteEventsTopic
            
  CFNotifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CFNotifyPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref SlackNotificationErrorsTopic
          - Effect: Allow
            Action:
              - cloudformation:DescribeStackResources
            Resource: '*'

  CFNotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to post CF updates to Slack
      Handler: lambda_notify.lambda_handler
      Role: !GetAtt CFNotifyRole.Arn
      CodeUri: ./cf-notify/cf-notify.zip
      Runtime: python2.7
      Timeout: 300
      AutoPublishAlias: "live"
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref SlackNotificationErrorsTopic
      Environment:
        Variables:
          WEBHOOK: !Ref SlackWebHookUrl
          CHANNEL: !Ref SlackChannel

  CFNotifyInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CFNotifyFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: CloudFormationEventsTopic

  SNSDLQErrorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to post SNS DLQ errors to Slack
      Handler: sns_error.lambda_handler
      Role: !GetAtt CFNotifyRole.Arn
      CodeUri: ./sns-notify/sns-error.zip
      Runtime: python2.7
      Timeout: 300
      AutoPublishAlias: "live"
      Environment:
        Variables:
          WEBHOOK: !Ref SlackWebHookUrl
          CHANNEL: !Ref SlackChannel
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref SlackNotificationErrorsTopic

  SNSDLQErrorInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: SNSDLQErrorFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: ErrorsTopic

  CodeBuildStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to post CodeBuild updates to Slack
      Handler: index.handler
      Role: !GetAtt CFNotifyRole.Arn
      CodeUri: ./codebuild-notify/
      Runtime: nodejs6.10
      Timeout: 300
      AutoPublishAlias: "live"
      Environment:
        Variables:
          WEBHOOK: !Ref SlackWebHookUrl
          CHANNEL: !Ref SlackChannel
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref SlackNotificationErrorsTopic
        
  CodeBuildErrorInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: CodeBuildStatusFunction
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn:
          Ref: BuildStatusTopic

Outputs:
  S3Bucket:
    Value: !Ref CloudFormationSyncBucket
    Export:
      Name: !Sub "CloudFormationDeployer:${AWS::StackName}:S3Bucket"
  S3BucketArn:
    Value: !GetAtt CloudFormationSyncBucket.Arn
    Export:
      Name: !Sub "CloudFormationDeployer:${AWS::StackName}:S3BucketArn"
  BuildStatusSNSArn:
    Value: !Ref BuildStatusTopic
    Export:
      Name: !Sub "CloudFormationDeployer:${AWS::StackName}:BuildStatusSNSArn"
